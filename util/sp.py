import numpy as np
import math
from scipy.signal import welch, upfirdn, firls
import scipy.signal as sig
from math import pi as PI
import cmath
from plot import PLOT

randn = lambda shape, var=1: np.random.normal(0, math.sqrt(var), shape)
crandn = lambda shape, var=1: randn(shape, var / 2) + 1j * randn(shape, var / 2)
single_tone = lambda fc, fs, Len: np.cos(2 * PI * fc / fs * np.arange(Len)) + 1j * np.sin(2 * PI * fc / fs * np.arange(Len))
power_est = lambda x: np.mean(np.abs(x)**2)
db = lambda x: 10 * np.log10(x + 1e-50)
power_est_dB = lambda x: db(power_est(x))
power_est_dBm = lambda x, offset=0, loading=50: power_est_dB(x) + db(1000.0 / loading / 2) + offset
mean = lambda x: sum(x) / (len(x) + 1e-50)
var = lambda x: mean(x**2) - mean(x)**2
stdval = lambda x: np.sqrt(var(x))
conj = lambda x: x.real - 1j * x.imag
dcor = lambda x: [x[i] * conj(x[i + 1]) for i in range(len(x) - 1)]
fc_est = lambda x, f: -cmath.phase(sum(dcor(x))) / 2 / PI * f
db2scale = lambda x: 10**(x / 20)
pow_scaling = lambda x, db: [db2scale(db) * a for a in x]
add_noise = lambda x, snr=0: x + crandn(x.shape, power_est(x) * pow(10.0, -snr / 10))
add_noise_dbm = lambda x, noise_var_dbm: x + crandn(x.shape, pow(10.0, noise_var_dbm / 10))
cal_snr_dB = lambda x, y: power_est_dB(x) - power_est_dB(x - y)
angle_nrm = lambda x: np.angle(x) / 2 / PI
expj = lambda x: np.cos(2 * PI * x) + 1j * np.sin(2 * PI * x)
spectrum = lambda x, fs=1.0, nfft=256: tuple([np.fft.fftshift(a) for a in welch(x, fs=fs, window='hanning', nperseg=nfft, noverlap=None, nfft=nfft, scaling='density')])
mse_db = lambda x, y: power_est_dB(x - y)
mse = lambda x, y: np.mean(np.abs(x - y)**2)
# downsampling=lambda x,rate:upfirdn(x,down=rate)
# udsampling=upfirdn


def upsample(x, rate, ntaps=64):
    if (rate == 1):
        return x
    else:
        fs = rate
        band = [0, 0.475, 0.525, fs / 2]
        desired = [1, 1, 0, 0]
        weight = [10, 1]
        filt = rate * firls(ntaps * rate + 1, band, desired, weight=weight, fs=fs)
        # filt, ntaps = [1], 0
        out = upfirdn(filt, x, up=rate)
        return out[int(ntaps * rate / 2):(len(out) - int(ntaps * rate / 2))]


def downsample(x, rate, ntaps=64):
    if (rate == 1):
        return x
    else:
        fs = rate
        band = [0, 0.475, 0.525, fs / 2]
        desired = [1, 1, 0, 0]
        weight = [10, 1]

        filt = firls(ntaps * rate + 1, band, desired, weight=weight, fs=fs)
        out = upfirdn(filt, x, down=rate)
        return out[int(ntaps / 2):(len(out) - int(ntaps / 2))]


def crand_bandlimit(length, bw=1, fc=1, fs=2, var=1, ntaps=24):
    # band = [0, bw / 2 * 0.9, bw / 2 * 1.1, fs / 2]
    # desired = [1, 1, 0, 0]
    # fir_firls = firls(taps, band, desired, fs=fs)
    rate = int(fs / bw)
    print(rate)
    x = crandn(int(length / rate), var)
    y = upsample(x, rate, ntaps)[(2 * ntaps):(length + (2 * ntaps) - 1)]
    # out = sig.convolve(fir_firls, x)[int(taps / 2):-int(taps / 2)]
    return mixer(y, fs, fc)


def mixer(x, fs, fc):
    return np.multiply(x, single_tone(fc, fs, len(x)))


def spectrum_dB(*args, fs=1.0, nfft=256, show=False, fn=None, label=[], title='spectrum', xlabel='Freq', linewidth=3, legend=False):

    if len(label):
        legend = True

    if show == True or fn is not None:
        p = PLOT(xlabel=xlabel, ylabel='PSD(dB)', title=title, grid=True, linewidth=linewidth, legend=legend)
    else:
        p = None

    pxx_dB_out = []
    for i, x in enumerate(args):
        f, pxx = spectrum(x, fs, nfft)
        if (np.any(f < 0)):
            f = np.fft.fftshift(f)
            pxx = np.fft.fftshift(pxx)
            if (pxx.ndim != 1):
                pxx = pxx[0]

        pxx_dB = db(pxx)
        pxx_dB_out.append(pxx_dB)
        if p:
            p.add(f, pxx_dB, label=label[i] if len(label) > i else "signal " + str(i))

    if show:
        p.show()
    if fn is not None:
        p.save(fn)

    if len(args) == 1:
        return f, pxx_dB_out[0]
    else:
        return f, pxx_dB_out


def upsampling(x, rate):
    if (rate == 1):
        return x
    else:
        filt_table = {
            2: [
                4.153e-04,
                1.931e-03,
                1.251e-03,
                -3.476e-03,
                -7.199e-04,
                7.736e-03,
                -3.484e-03,
                -1.261e-02,
                1.523e-02,
                1.211e-02,
                -3.616e-02,
                5.266e-03,
                6.252e-02,
                -6.146e-02,
                -8.515e-02,
                3.015e-01,
                5.941e-01,
                3.015e-01,
                -8.515e-02,
                -6.146e-02,
                6.252e-02,
                5.266e-03,
                -3.616e-02,
                1.211e-02,
                1.523e-02,
                -1.261e-02,
                -3.484e-03,
                7.736e-03,
                -7.199e-04,
                -3.476e-03,
                1.251e-03,
                1.931e-03,
                4.153e-04,
            ],  #eualripple,0.5,0.75
            3: [
                3.363e-06,
                2.227e-04,
                8.624e-04,
                1.482e-03,
                8.948e-04,
                -1.242e-03,
                -2.721e-03,
                -5.830e-04,
                3.954e-03,
                4.586e-03,
                -2.184e-03,
                -9.041e-03,
                -4.334e-03,
                1.004e-02,
                1.470e-02,
                -2.968e-03,
                -2.408e-02,
                -1.485e-02,
                2.403e-02,
                4.181e-02,
                -3.435e-03,
                -7.150e-02,
                -5.704e-02,
                9.476e-02,
                3.003e-01,
                3.964e-01,
                3.003e-01,
                9.476e-02,
                -5.704e-02,
                -7.150e-02,
                -3.435e-03,
                4.181e-02,
                2.403e-02,
                -1.485e-02,
                -2.408e-02,
                -2.968e-03,
                1.470e-02,
                1.004e-02,
                -4.334e-03,
                -9.041e-03,
                -2.184e-03,
                4.586e-03,
                3.954e-03,
                -5.830e-04,
                -2.721e-03,
                -1.242e-03,
                8.948e-04,
                1.482e-03,
                8.624e-04,
                2.227e-04,
                3.363e-06,
            ],
            4: [
                -4.074e-06,
                7.135e-05,
                3.104e-04,
                7.203e-04,
                1.084e-03,
                9.941e-04,
                1.624e-04,
                -1.151e-03,
                -2.021e-03,
                -1.405e-03,
                8.321e-04,
                3.295e-03,
                3.698e-03,
                7.554e-04,
                -4.090e-03,
                -6.936e-03,
                -4.276e-03,
                3.401e-03,
                1.058e-02,
                1.025e-02,
                9.978e-05,
                -1.359e-02,
                -1.903e-02,
                -8.212e-03,
                1.425e-02,
                3.114e-02,
                2.420e-02,
                -9.430e-03,
                -4.895e-02,
                -5.868e-02,
                -1.117e-02,
                9.051e-02,
                2.080e-01,
                2.864e-01,
                2.864e-01,
                2.080e-01,
                9.051e-02,
                -1.117e-02,
                -5.868e-02,
                -4.895e-02,
                -9.430e-03,
                2.420e-02,
                3.114e-02,
                1.425e-02,
                -8.212e-03,
                -1.903e-02,
                -1.359e-02,
                9.978e-05,
                1.025e-02,
                1.058e-02,
                3.401e-03,
                -4.276e-03,
                -6.936e-03,
                -4.090e-03,
                7.554e-04,
                3.698e-03,
                3.295e-03,
                8.321e-04,
                -1.405e-03,
                -2.021e-03,
                -1.151e-03,
                1.624e-04,
                9.941e-04,
                1.084e-03,
                7.203e-04,
                3.104e-04,
                7.135e-05,
                -4.074e-06,
            ],  #eualripple,0.25,0.375
            6: [
                3.239e-07,
                3.793e-05,
                1.155e-04,
                2.520e-04,
                4.360e-04,
                6.242e-04,
                7.419e-04,
                7.023e-04,
                4.424e-04,
                -3.376e-05,
                -6.265e-04,
                -1.145e-03,
                -1.359e-03,
                -1.084e-03,
                -2.838e-04,
                8.643e-04,
                1.981e-03,
                2.587e-03,
                2.286e-03,
                9.595e-04,
                -1.103e-03,
                -3.221e-03,
                -4.519e-03,
                -4.250e-03,
                -2.153e-03,
                1.319e-03,
                5.027e-03,
                7.469e-03,
                7.340e-03,
                4.126e-03,
                -1.501e-03,
                -7.714e-03,
                -1.204e-02,
                -1.227e-02,
                -7.405e-03,
                1.642e-03,
                1.203e-02,
                1.973e-02,
                2.089e-02,
                1.343e-02,
                -1.740e-03,
                -2.039e-02,
                -3.575e-02,
                -4.038e-02,
                -2.850e-02,
                1.797e-03,
                4.740e-02,
                1.005e-01,
                1.501e-01,
                1.854e-01,
                1.982e-01,
                1.854e-01,
                1.501e-01,
                1.005e-01,
                4.740e-02,
                1.797e-03,
                -2.850e-02,
                -4.038e-02,
                -3.575e-02,
                -2.039e-02,
                -1.740e-03,
                1.343e-02,
                2.089e-02,
                1.973e-02,
                1.203e-02,
                1.642e-03,
                -7.405e-03,
                -1.227e-02,
                -1.204e-02,
                -7.714e-03,
                -1.501e-03,
                4.126e-03,
                7.340e-03,
                7.469e-03,
                5.027e-03,
                1.319e-03,
                -2.153e-03,
                -4.250e-03,
                -4.519e-03,
                -3.221e-03,
                -1.103e-03,
                9.595e-04,
                2.286e-03,
                2.587e-03,
                1.981e-03,
                8.643e-04,
                -2.838e-04,
                -1.084e-03,
                -1.359e-03,
                -1.145e-03,
                -6.265e-04,
                -3.376e-05,
                4.424e-04,
                7.023e-04,
                7.419e-04,
                6.242e-04,
                4.360e-04,
                2.520e-04,
                1.155e-04,
                3.793e-05,
                3.239e-07,
            ],
            8: [
                -4.806e-06,
                1.107e-05,
                3.649e-05,
                8.389e-05,
                1.563e-04,
                2.519e-04,
                3.612e-04,
                4.663e-04,
                5.423e-04,
                5.607e-04,
                4.964e-04,
                3.348e-04,
                7.989e-05,
                -2.409e-04,
                -5.765e-04,
                -8.579e-04,
                -1.010e-03,
                -9.692e-04,
                -7.013e-04,
                -2.174e-04,
                4.177e-04,
                1.089e-03,
                1.648e-03,
                1.941e-03,
                1.848e-03,
                1.313e-03,
                3.754e-04,
                -8.214e-04,
                -2.046e-03,
                -3.019e-03,
                -3.467e-03,
                -3.193e-03,
                -2.135e-03,
                -4.066e-04,
                1.703e-03,
                3.766e-03,
                5.293e-03,
                5.840e-03,
                5.123e-03,
                3.104e-03,
                4.620e-05,
                -3.504e-03,
                -6.799e-03,
                -9.032e-03,
                -9.515e-03,
                -7.858e-03,
                -4.102e-03,
                1.220e-03,
                7.131e-03,
                1.236e-02,
                1.557e-02,
                1.568e-02,
                1.210e-02,
                4.978e-03,
                -4.720e-03,
                -1.528e-02,
                -2.447e-02,
                -2.988e-02,
                -2.934e-02,
                -2.139e-02,
                -5.580e-03,
                1.730e-02,
                4.526e-02,
                7.534e-02,
                1.040e-01,
                1.276e-01,
                1.432e-01,
                1.487e-01,
                1.432e-01,
                1.276e-01,
                1.040e-01,
                7.534e-02,
                4.526e-02,
                1.730e-02,
                -5.580e-03,
                -2.139e-02,
                -2.934e-02,
                -2.988e-02,
                -2.447e-02,
                -1.528e-02,
                -4.720e-03,
                4.978e-03,
                1.210e-02,
                1.568e-02,
                1.557e-02,
                1.236e-02,
                7.131e-03,
                1.220e-03,
                -4.102e-03,
                -7.858e-03,
                -9.515e-03,
                -9.032e-03,
                -6.799e-03,
                -3.504e-03,
                4.620e-05,
                3.104e-03,
                5.123e-03,
                5.840e-03,
                5.293e-03,
                3.766e-03,
                1.703e-03,
                -4.066e-04,
                -2.135e-03,
                -3.193e-03,
                -3.467e-03,
                -3.019e-03,
                -2.046e-03,
                -8.214e-04,
                3.754e-04,
                1.313e-03,
                1.848e-03,
                1.941e-03,
                1.648e-03,
                1.089e-03,
                4.177e-04,
                -2.174e-04,
                -7.013e-04,
                -9.692e-04,
                -1.010e-03,
                -8.579e-04,
                -5.765e-04,
                -2.409e-04,
                7.989e-05,
                3.348e-04,
                4.964e-04,
                5.607e-04,
                5.423e-04,
                4.663e-04,
                3.612e-04,
                2.519e-04,
                1.563e-04,
                8.389e-05,
                3.649e-05,
                1.107e-05,
                -4.806e-06,
            ],  #eualripple,0.125,0.1875
        }
        assert (rate in filt_table.keys())
        filt = [rate * a for a in filt_table[rate]]
        return upfirdn(filt, x, up=rate)


def downsampling(x, rate):
    if (rate == 1):
        return x
    else:
        filt_table = {
            2: [
                4.153e-04,
                1.931e-03,
                1.251e-03,
                -3.476e-03,
                -7.199e-04,
                7.736e-03,
                -3.484e-03,
                -1.261e-02,
                1.523e-02,
                1.211e-02,
                -3.616e-02,
                5.266e-03,
                6.252e-02,
                -6.146e-02,
                -8.515e-02,
                3.015e-01,
                5.941e-01,
                3.015e-01,
                -8.515e-02,
                -6.146e-02,
                6.252e-02,
                5.266e-03,
                -3.616e-02,
                1.211e-02,
                1.523e-02,
                -1.261e-02,
                -3.484e-03,
                7.736e-03,
                -7.199e-04,
                -3.476e-03,
                1.251e-03,
                1.931e-03,
                4.153e-04,
            ],  #eualripple,0.5,0.75
            3: [
                3.363e-06,
                2.227e-04,
                8.624e-04,
                1.482e-03,
                8.948e-04,
                -1.242e-03,
                -2.721e-03,
                -5.830e-04,
                3.954e-03,
                4.586e-03,
                -2.184e-03,
                -9.041e-03,
                -4.334e-03,
                1.004e-02,
                1.470e-02,
                -2.968e-03,
                -2.408e-02,
                -1.485e-02,
                2.403e-02,
                4.181e-02,
                -3.435e-03,
                -7.150e-02,
                -5.704e-02,
                9.476e-02,
                3.003e-01,
                3.964e-01,
                3.003e-01,
                9.476e-02,
                -5.704e-02,
                -7.150e-02,
                -3.435e-03,
                4.181e-02,
                2.403e-02,
                -1.485e-02,
                -2.408e-02,
                -2.968e-03,
                1.470e-02,
                1.004e-02,
                -4.334e-03,
                -9.041e-03,
                -2.184e-03,
                4.586e-03,
                3.954e-03,
                -5.830e-04,
                -2.721e-03,
                -1.242e-03,
                8.948e-04,
                1.482e-03,
                8.624e-04,
                2.227e-04,
                3.363e-06,
            ],
            4: [
                -4.074e-06,
                7.135e-05,
                3.104e-04,
                7.203e-04,
                1.084e-03,
                9.941e-04,
                1.624e-04,
                -1.151e-03,
                -2.021e-03,
                -1.405e-03,
                8.321e-04,
                3.295e-03,
                3.698e-03,
                7.554e-04,
                -4.090e-03,
                -6.936e-03,
                -4.276e-03,
                3.401e-03,
                1.058e-02,
                1.025e-02,
                9.978e-05,
                -1.359e-02,
                -1.903e-02,
                -8.212e-03,
                1.425e-02,
                3.114e-02,
                2.420e-02,
                -9.430e-03,
                -4.895e-02,
                -5.868e-02,
                -1.117e-02,
                9.051e-02,
                2.080e-01,
                2.864e-01,
                2.864e-01,
                2.080e-01,
                9.051e-02,
                -1.117e-02,
                -5.868e-02,
                -4.895e-02,
                -9.430e-03,
                2.420e-02,
                3.114e-02,
                1.425e-02,
                -8.212e-03,
                -1.903e-02,
                -1.359e-02,
                9.978e-05,
                1.025e-02,
                1.058e-02,
                3.401e-03,
                -4.276e-03,
                -6.936e-03,
                -4.090e-03,
                7.554e-04,
                3.698e-03,
                3.295e-03,
                8.321e-04,
                -1.405e-03,
                -2.021e-03,
                -1.151e-03,
                1.624e-04,
                9.941e-04,
                1.084e-03,
                7.203e-04,
                3.104e-04,
                7.135e-05,
                -4.074e-06,
            ],  #eualripple,0.25,0.375
            6: [
                3.239e-07,
                3.793e-05,
                1.155e-04,
                2.520e-04,
                4.360e-04,
                6.242e-04,
                7.419e-04,
                7.023e-04,
                4.424e-04,
                -3.376e-05,
                -6.265e-04,
                -1.145e-03,
                -1.359e-03,
                -1.084e-03,
                -2.838e-04,
                8.643e-04,
                1.981e-03,
                2.587e-03,
                2.286e-03,
                9.595e-04,
                -1.103e-03,
                -3.221e-03,
                -4.519e-03,
                -4.250e-03,
                -2.153e-03,
                1.319e-03,
                5.027e-03,
                7.469e-03,
                7.340e-03,
                4.126e-03,
                -1.501e-03,
                -7.714e-03,
                -1.204e-02,
                -1.227e-02,
                -7.405e-03,
                1.642e-03,
                1.203e-02,
                1.973e-02,
                2.089e-02,
                1.343e-02,
                -1.740e-03,
                -2.039e-02,
                -3.575e-02,
                -4.038e-02,
                -2.850e-02,
                1.797e-03,
                4.740e-02,
                1.005e-01,
                1.501e-01,
                1.854e-01,
                1.982e-01,
                1.854e-01,
                1.501e-01,
                1.005e-01,
                4.740e-02,
                1.797e-03,
                -2.850e-02,
                -4.038e-02,
                -3.575e-02,
                -2.039e-02,
                -1.740e-03,
                1.343e-02,
                2.089e-02,
                1.973e-02,
                1.203e-02,
                1.642e-03,
                -7.405e-03,
                -1.227e-02,
                -1.204e-02,
                -7.714e-03,
                -1.501e-03,
                4.126e-03,
                7.340e-03,
                7.469e-03,
                5.027e-03,
                1.319e-03,
                -2.153e-03,
                -4.250e-03,
                -4.519e-03,
                -3.221e-03,
                -1.103e-03,
                9.595e-04,
                2.286e-03,
                2.587e-03,
                1.981e-03,
                8.643e-04,
                -2.838e-04,
                -1.084e-03,
                -1.359e-03,
                -1.145e-03,
                -6.265e-04,
                -3.376e-05,
                4.424e-04,
                7.023e-04,
                7.419e-04,
                6.242e-04,
                4.360e-04,
                2.520e-04,
                1.155e-04,
                3.793e-05,
                3.239e-07,
            ],
            8: [
                -4.806e-06,
                1.107e-05,
                3.649e-05,
                8.389e-05,
                1.563e-04,
                2.519e-04,
                3.612e-04,
                4.663e-04,
                5.423e-04,
                5.607e-04,
                4.964e-04,
                3.348e-04,
                7.989e-05,
                -2.409e-04,
                -5.765e-04,
                -8.579e-04,
                -1.010e-03,
                -9.692e-04,
                -7.013e-04,
                -2.174e-04,
                4.177e-04,
                1.089e-03,
                1.648e-03,
                1.941e-03,
                1.848e-03,
                1.313e-03,
                3.754e-04,
                -8.214e-04,
                -2.046e-03,
                -3.019e-03,
                -3.467e-03,
                -3.193e-03,
                -2.135e-03,
                -4.066e-04,
                1.703e-03,
                3.766e-03,
                5.293e-03,
                5.840e-03,
                5.123e-03,
                3.104e-03,
                4.620e-05,
                -3.504e-03,
                -6.799e-03,
                -9.032e-03,
                -9.515e-03,
                -7.858e-03,
                -4.102e-03,
                1.220e-03,
                7.131e-03,
                1.236e-02,
                1.557e-02,
                1.568e-02,
                1.210e-02,
                4.978e-03,
                -4.720e-03,
                -1.528e-02,
                -2.447e-02,
                -2.988e-02,
                -2.934e-02,
                -2.139e-02,
                -5.580e-03,
                1.730e-02,
                4.526e-02,
                7.534e-02,
                1.040e-01,
                1.276e-01,
                1.432e-01,
                1.487e-01,
                1.432e-01,
                1.276e-01,
                1.040e-01,
                7.534e-02,
                4.526e-02,
                1.730e-02,
                -5.580e-03,
                -2.139e-02,
                -2.934e-02,
                -2.988e-02,
                -2.447e-02,
                -1.528e-02,
                -4.720e-03,
                4.978e-03,
                1.210e-02,
                1.568e-02,
                1.557e-02,
                1.236e-02,
                7.131e-03,
                1.220e-03,
                -4.102e-03,
                -7.858e-03,
                -9.515e-03,
                -9.032e-03,
                -6.799e-03,
                -3.504e-03,
                4.620e-05,
                3.104e-03,
                5.123e-03,
                5.840e-03,
                5.293e-03,
                3.766e-03,
                1.703e-03,
                -4.066e-04,
                -2.135e-03,
                -3.193e-03,
                -3.467e-03,
                -3.019e-03,
                -2.046e-03,
                -8.214e-04,
                3.754e-04,
                1.313e-03,
                1.848e-03,
                1.941e-03,
                1.648e-03,
                1.089e-03,
                4.177e-04,
                -2.174e-04,
                -7.013e-04,
                -9.692e-04,
                -1.010e-03,
                -8.579e-04,
                -5.765e-04,
                -2.409e-04,
                7.989e-05,
                3.348e-04,
                4.964e-04,
                5.607e-04,
                5.423e-04,
                4.663e-04,
                3.612e-04,
                2.519e-04,
                1.563e-04,
                8.389e-05,
                3.649e-05,
                1.107e-05,
                -4.806e-06,
            ],  #eualripple,0.125,0.1875
        }
        assert (rate in filt_table.keys())
        filt = [rate * a for a in filt_table[rate]]
        return upfirdn(filt, x, down=rate)